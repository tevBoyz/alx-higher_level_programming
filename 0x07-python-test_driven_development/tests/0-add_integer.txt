============================
How to use 0-add_integers.py
============================

This module defines addition of two integers ``add_integer(a, b=98)``

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. It is the same as using the ``+`` operator.

::

	>>>add_integer = __import__('0-add_integer').add_integer
	>>>add_integer(2, 3)
	5


::

	>>> add_integer(2, -3)
	-1

The function works also with float values

::

	>>> add_integer(2.0, 3.0)
	5

Floats are casted to ints before adding

::

	>>> add_integer(2.9, 0.9)
	2

::

	>>> add_integer(-2.9, 0.2)
	-2

Float and non-floats can be combined

::

	>>> add_integer(2.3, -3)
	-1

Second arg is optional, it is set to be 98 by default

::

	>>> add_integer(2)
	100

Non-Numbers
===========

``add_integer()`` expects both args to be either int or float.
otherwise TypeError is raised

::

	>>> add_integer('hello', 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2, 'hello')
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2.3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both args are non integers or non-floats, a TypeError message is raised for
one argument.

::

	>>> add_integer('hello', 'there')
	Traceback (most recent call last):
	TypeError: a must be an integer

The function will fail if infinity is provided

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

And with NaN numbers.

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
